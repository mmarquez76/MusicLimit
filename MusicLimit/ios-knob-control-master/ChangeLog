2014-02-21  Jimmy Dee  <jgvdthree@gmail.com>

    * Version 1.0.0

    Linear Return, Wheel of Fortune and Continuous modes complete.

2014-04-02  Jimmy Dee  <jgvdthree@gmail.com>

    * Version 1.1.0

    Can now choose from three gestures for the control.

    Control now functions without an externally supplied image. If no image supplied,
    the control provides a simple, customizable knob image.

    Numerous changes to the demo app:
    - Separate demos in a tab view for greater clarity: Continuous, discrete and feedback.
    - Feedback demo provides an example of using a disabled knob control as a dial.
    - New knob images.
    - Demos of new built-in knob images and gestures.
    
2014-05-30  Jimmy Dee  <jgvdthree@gmail.com>

    * Version 1.2.0
    
    Rotary dial mode complete.

    Added support for using a tap gesture in all modes.

    Control now has backgroundImage and foregroundImage properties. These properties may be used
    to specify stationary background and foreground layers for the control. The knob image rotates
    between them. These are particularly useful for providing a dial background with numbers and
    a finger stop in the foreground in rotary dial mode, but they are available in all modes.

    Demo app:
    - Rotary dial demo with some poor images (as well as generated dial images).
    - Tap gesture option available in continuous and discrete demos.
    
2014-08-29  Jimmy Dee  <jgvdthree@gmail.com>

    * Version 1.3.0

    New features
    ------------

    This version offers support for Swift. This mainly means the mode and gesture enumeration
    cases were renamed. The old names are still around with deprecation warnings. A full Swift
    demo app is now available with the same content as the Objective-C app.

    The control can now cast shadows if so configured.

    The control supports attributed strings for titles.

    You can now configure the font name to use for titles (they are still automatically sized to
    fit). Titles will no longer be rendered above the configured Dynamic Type headline size on
    iOS 7+ (except when explicitly so configured with the zoomPointSize property, q.v.).

    The title at the top of a discrete knob can be automatically increased in size if so configured.

    The control can now be used in an unnormalized mode so that the position property does not
    jump from π to -π or vice versa. If circular is YES, the position will continue to increase or
    decrease without bound as the knob turns.

    New properties
    --------------

    BOOL drawsAsynchronously: Whether to use a background thread to render some animation layers
    faster.

    NSString* fontName: The font name to use for titles in the discrete modes.

    Used to configure generated images and shadow paths for custom images:
    CGFloat fingerHoleMargin
    CGFloat fingerHoldRadius
    CGFloat knobRadius

    BOOL masksImage: Whether to mask the image to a circle or specified path.

    BOOL normalized: Whether to limit the position property to (-π, π]. Only available when
    circular == YES.

    Used to configure shadows:
    UIColor* shadowColor
    CGSize shadowOffset
    CGFloat shadowOpacity
    CGFloat shadowRadius
    UIBezierPath* foregroundLayerShadowPath
    UIBezierPath* middleLayerShadowPath

    CGFloat zoomPointSize: The size to which to increase the top title of a generated knob.
    BOOL zoomTopTitle: Whether to increase the top title of the knob if it is below a certain size.

    Bug fixes
    ---------

    Fixed the knob animation so that it can now keep up with a fast finger.

    The knob control now properly resizes itself.

    Greatly improved text rendered by the knob in discrete and rotary dial modes.

    Demo apps
    ---------

    New Swift demo app with the same content as the Objective-C app.

    "Spin" music player demo uses the knob control to simulate a record player you can rewind and
    fast forward with your finger.
